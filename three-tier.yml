---
# Three Tier Application Playbook
- name: Configuring a new Three Tier Application
  hosts: apic1
  connection: local
  gather_facts: no
  
  vars_files:
    - /Users/threnzy/Ansible/2.9/BRKACI-1619/external_vars.yml

  tasks:
  - name: Create Ansible Tenant
    aci_tenant:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      description: "Tenant configured by Ansible"
      validate_certs: no
      state: present

  - name: Create ansible-VRF
    aci_vrf:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      vrf: "{{ vrf }}"
      description: "VRF configured by Ansible"
      validate_certs: no
      state: present

  - name: Creating ansible-BD
    aci_bd:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      vrf: "{{ vrf }}"
      bd: "{{ bd.name }}"
      enable_routing: yes
      arp_flooding: no
      l2_unknown_unicast: proxy
      description: "BD configured by Ansible"
      validate_certs: no
      state: present

  - name: Creating ansible-BD Subnet
    aci_bd_subnet:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      bd: "{{ bd.name }}"
      gateway: "{{ bd.ip }}"
      mask: "{{ bd.mask }}"
      scope: "private"
      description: "BD subnet added by Ansible"
      validate_certs: no
      state: present

  - name: Create ansible-AP
    aci_ap:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      ap: "{{ app_profile }}"
      description: "app profile configured by Ansible"
      validate_certs: no
      state: present

  - name: Creating EPGs
    aci_epg:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      ap: "{{ app_profile }}"
      epg: "{{ item.epg }}"
      bd: "{{ bd.name }}"
      description: "EPG configured by Ansible"
      validate_certs: no
      state: present
    loop:
      - epg: "{{ epg1 }}"
      - epg: "{{ epg2 }}"
      - epg: "{{ epg3 }}"

  - name: Creating Contracts
    aci_contract:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      #contract: "{{ web_to_app_contract }}"
      contract: "{{ item.contract }}"
      tenant: "{{ tenant }}"
      scope: "context"
      description: "Contract created by Ansible"
      validate_certs: no
      state: present
    loop:
      - contract: "{{ web_to_app_contract }}"
      - contract: "{{ app_to_db_contract }}"

  - name: Add Filters
    aci_filter:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      #filter: "{{ http_filter }}"
      filter: "{{ item.filter }}"
      tenant: "{{ tenant }}"
      description: "Filter created by Ansible"
      validate_certs: no
      state: present
    loop:
      - filter: "{{ http_filter }}"
      - filter: "{{ db_filter }}"

  - name: Add Port 80 and 1433 to Filter entries
    aci_filter_entry:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      entry: "{{ item.entry }}"
      tenant: "{{ tenant }}"
      ether_type: ip
      ip_protocol: tcp
      dst_port: "{{ item.dst_port }}"
      filter: "{{ item.filter }}"
      description: "Filter Entry created by Ansible"
      validate_certs: no
      state: present
    loop:
      - entry: "{{ http_filter_entry }}"
        dst_port: 80
        filter: "{{ http_filter }}"
      - entry: "{{ db_filter_entry }}"
        dst_port: 1433
        filter: "{{ db_filter }}"

  - name: Bind subjects to contracts
    aci_contract_subject:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      contract: "{{ item.contract }}"
      subject: "{{ item.subject }}"
      reverse_filter: yes
      description: "Subject created by Ansible"
      validate_certs: no
      state: present
    loop:
      - contract: "{{ web_to_app_contract }}"
        subject: "{{ web_to_app_contract_subject }}"
      - contract: "{{ app_to_db_contract }}"
        subject: "{{ app_to_db_contract_subject }}"

  - name: Bind Contract Subjects to filter
    aci_contract_subject_to_filter:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      contract: "{{ item.contract }}"
      #contract: "{{ web_to_app_contract }}"
      filter: "{{ item.filter }}"
      #filter: "{{ http_filter }}"
      #subject: "{{ web_to_app_contract_subject }}"
      subject: "{{ item.subject }}"
      validate_certs: no
      state: present
    loop:
      - contract: "{{ web_to_app_contract }}"
        filter: "{{ http_filter }}"
        subject: "{{ web_to_app_contract_subject }}"
      - contract: "{{ app_to_db_contract }}"
        filter: "{{ db_filter }}"
        subject: "{{ app_to_db_contract_subject }}"

  - name: Bind EPGs to Contract
    aci_epg_to_contract:
      hostname: "{{ inventory_hostname }}"
      username: ansible
      private_key: ansible.key
      tenant: "{{ tenant }}"
      epg: "{{ item.epg }}"
      ap: "{{ app_profile }}"
      contract: "{{ item.contract }}"
      contract_type: "{{ item.type }}"
      validate_certs: no
      state: present
    loop:
    - epg: "{{ epg1 }}"
      type: consumer
      contract: "{{ web_to_app_contract }}"
    - epg: "{{ epg2 }}"
      type: provider
      contract: "{{ web_to_app_contract }}"
    - epg: "{{ epg2 }}"
      type: consumer
      contract: "{{ app_to_db_contract }}"
    - epg: "{{ epg3 }}"
      type: provider
      contract: "{{ app_to_db_contract }}"
